/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SimpleKeyboard.java
 *
 * Created on 30/03/2010, 01:28:08 AM
 */

package com.stayprime.ui;

import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionListener;
import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import org.jdesktop.swingx.JXPanel;

/**
 *
 * @author benjamin
 */
public class SimpleKeyboard extends JXPanel {
    public static final String ACTION_CANCEL = "cancel";
    public static final String ACTION_DONE = "DONE";

    protected JButton charButtons[], numButtons[], specialButtons[];
    private String text;

    private ActionListener listener;

    JTextComponent textComponent;
    private CaretListenerImpl caretListener;

    private boolean autoCaps = true;

    private static SimpleKeyboard instance;

    /** Creates new form SimpleKeyboard */
    public SimpleKeyboard() {
        initComponents();
        charButtons = new JButton[] {
            key1, key2, key3, key4, key5, key6, key7, key8, key9, 
            key10, key11, key12, key13, key14, key15, key16, key17, key18,
            key19, key20, key21, key22, key23, key24, key25, key26
        };

	numButtons = new JButton[] {
	    num1, num2, num3, num4, num5, num6, num7, num8, num9, num0
	};

	specialButtons = new JButton[] {
	    at, dash, dot, dotcom
	};

	setNumbersVisible(false);
	setSymbolsVisible(false);
        setActionsVisible(false);
    }

    public static SimpleKeyboard getInstance() {
	if(instance == null) {
	    instance = new SimpleKeyboard();
	    instance.setName("simpleKeyboard");
	    instance.setFont(instance.getFont().deriveFont(Font.BOLD, 24f));
	}

	instance.setDoneButtonLabel("Done");
	return instance;
    }

    @Override
    public void setFont(Font font) {
        super.setFont(font);

	if(font != null && keyboard != null) {
	    for(Component comp: keyboard.getComponents()) {
                if(comp instanceof AbstractButton) {
                    ((AbstractButton)comp).setFont(font);
                }
            }
        }
    }

    public void setTextComponent(JTextComponent textComponent) {
	if(caretListener == null)
	    caretListener = new CaretListenerImpl();
	else if(textComponent != null)
	    textComponent.removeCaretListener(caretListener);

	this.textComponent = textComponent;

	if(textComponent != null)
	textComponent.addCaretListener(caretListener);

	doAutoCaps();
    }

    public void setListener(ActionListener listener) {
	if(this.listener != null) {
	    cancel.removeActionListener(this.listener);
	    done.removeActionListener(this.listener);
	}
	    
	this.listener = listener;

	if(listener != null) {
	    cancel.addActionListener(listener);
	    done.addActionListener(listener);
	}

        setActionsVisible(listener != null);
    }

    public void prepareKeyboard() {
        //caps.setSelected(false);
        shift.setSelected(textComponent.getText().equals(""));
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
		textComponent.requestFocus();
            }
        });
    }

    public final void setNumbersVisible(boolean visible) {
	for(JButton b: numButtons)
	    b.setVisible(visible);
    }

    public final void setActionsVisible(boolean visible) {
        done.setVisible(visible);
        cancel.setVisible(visible);
    }


    public final void setSymbolsVisible(boolean visible) {
	for(JButton b: specialButtons)
	    b.setVisible(visible);
    }

    public void setAutoCaps(boolean autoCaps) {
	this.autoCaps = autoCaps;

	if(autoCaps)
	    doAutoCaps();
	else
	    shift.setSelected(false);
    }

    private void doAutoCaps() {
	if(autoCaps && textComponent != null) {
	    boolean caps = false;
	    Document document = textComponent.getDocument();
	    int selStart = Math.min(textComponent.getSelectionStart(), textComponent.getSelectionEnd());

	    if(selStart == 0)
		caps = true;
	    else {
		char c = textComponent.getText().charAt(selStart - 1);
		if(" .".indexOf(c) >= 0)
		    caps = true;
	    }

	    shift.setSelected(caps);
	}
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        keyboard = new javax.swing.JPanel();
        num1 = new KeyButton();
        num2 = new KeyButton();
        num3 = new KeyButton();
        num4 = new KeyButton();
        num5 = new KeyButton();
        num6 = new KeyButton();
        num7 = new KeyButton();
        num8 = new KeyButton();
        num9 = new KeyButton();
        num0 = new KeyButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler13 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler14 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler15 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler16 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler17 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler18 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler19 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        filler20 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        key1 = new KeyButton();
        key2 = new KeyButton();
        key3 = new KeyButton();
        key4 = new KeyButton();
        key5 = new KeyButton();
        key6 = new KeyButton();
        key7 = new KeyButton();
        key8 = new KeyButton();
        key9 = new KeyButton();
        key10 = new KeyButton();
        key11 = new KeyButton();
        key12 = new KeyButton();
        key13 = new KeyButton();
        key14 = new KeyButton();
        key15 = new KeyButton();
        key16 = new KeyButton();
        key17 = new KeyButton();
        key18 = new KeyButton();
        key19 = new KeyButton();
        at = new KeyButton();
        key20 = new KeyButton();
        key21 = new KeyButton();
        key22 = new KeyButton();
        key23 = new KeyButton();
        key24 = new KeyButton();
        key25 = new KeyButton();
        key26 = new KeyButton();
        back = new javax.swing.JButton();
        dash = new KeyButton("-", "_");
        dot = new KeyButton();
        shift = new javax.swing.JToggleButton();
        space = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        done = new javax.swing.JButton();
        dotcom = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(768, 300));
        setPreferredSize(new java.awt.Dimension(768, 300));
        setLayout(new java.awt.BorderLayout());

        keyboard.setOpaque(false);
        keyboard.setFocusable(false);
        keyboard.setLayout(new java.awt.GridBagLayout());

        num1.setText("1");
        num1.setFocusPainted(false);
        num1.setFocusable(false);
        num1.setMaximumSize(new java.awt.Dimension(0, 10));
        num1.setMinimumSize(new java.awt.Dimension(0, 10));
        num1.setPreferredSize(new java.awt.Dimension(0, 10));
        num1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        keyboard.add(num1, gridBagConstraints);

        num2.setText("2");
        num2.setFocusPainted(false);
        num2.setFocusable(false);
        num2.setMaximumSize(new java.awt.Dimension(0, 10));
        num2.setMinimumSize(new java.awt.Dimension(0, 10));
        num2.setPreferredSize(new java.awt.Dimension(0, 10));
        num2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num2, gridBagConstraints);

        num3.setText("3");
        num3.setFocusPainted(false);
        num3.setFocusable(false);
        num3.setMaximumSize(new java.awt.Dimension(0, 10));
        num3.setMinimumSize(new java.awt.Dimension(0, 10));
        num3.setPreferredSize(new java.awt.Dimension(0, 10));
        num3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num3, gridBagConstraints);

        num4.setText("4");
        num4.setFocusPainted(false);
        num4.setFocusable(false);
        num4.setMaximumSize(new java.awt.Dimension(0, 10));
        num4.setMinimumSize(new java.awt.Dimension(0, 10));
        num4.setPreferredSize(new java.awt.Dimension(0, 10));
        num4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num4, gridBagConstraints);

        num5.setText("5");
        num5.setFocusPainted(false);
        num5.setFocusable(false);
        num5.setMaximumSize(new java.awt.Dimension(0, 10));
        num5.setMinimumSize(new java.awt.Dimension(0, 10));
        num5.setPreferredSize(new java.awt.Dimension(0, 10));
        num5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num5, gridBagConstraints);

        num6.setText("6");
        num6.setFocusPainted(false);
        num6.setFocusable(false);
        num6.setMaximumSize(new java.awt.Dimension(0, 10));
        num6.setMinimumSize(new java.awt.Dimension(0, 10));
        num6.setPreferredSize(new java.awt.Dimension(0, 10));
        num6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num6, gridBagConstraints);

        num7.setText("7");
        num7.setFocusPainted(false);
        num7.setFocusable(false);
        num7.setMaximumSize(new java.awt.Dimension(0, 10));
        num7.setMinimumSize(new java.awt.Dimension(0, 10));
        num7.setPreferredSize(new java.awt.Dimension(0, 10));
        num7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num7, gridBagConstraints);

        num8.setText("8");
        num8.setFocusPainted(false);
        num8.setFocusable(false);
        num8.setMaximumSize(new java.awt.Dimension(0, 10));
        num8.setMinimumSize(new java.awt.Dimension(0, 10));
        num8.setPreferredSize(new java.awt.Dimension(0, 10));
        num8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num8, gridBagConstraints);

        num9.setText("9");
        num9.setFocusPainted(false);
        num9.setFocusable(false);
        num9.setMaximumSize(new java.awt.Dimension(0, 10));
        num9.setMinimumSize(new java.awt.Dimension(0, 10));
        num9.setPreferredSize(new java.awt.Dimension(0, 10));
        num9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num9, gridBagConstraints);

        num0.setText("0");
        num0.setFocusPainted(false);
        num0.setFocusable(false);
        num0.setMaximumSize(new java.awt.Dimension(0, 10));
        num0.setMinimumSize(new java.awt.Dimension(0, 10));
        num0.setPreferredSize(new java.awt.Dimension(0, 10));
        num0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(num0, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler11, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler12, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler14, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler15, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler16, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler17, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler18, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler19, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        keyboard.add(filler20, gridBagConstraints);

        key1.setText("q");
        key1.setFocusPainted(false);
        key1.setFocusable(false);
        key1.setMaximumSize(new java.awt.Dimension(0, 10));
        key1.setMinimumSize(new java.awt.Dimension(0, 10));
        key1.setPreferredSize(new java.awt.Dimension(0, 10));
        key1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        keyboard.add(key1, gridBagConstraints);

        key2.setText("w");
        key2.setFocusPainted(false);
        key2.setFocusable(false);
        key2.setMaximumSize(new java.awt.Dimension(0, 10));
        key2.setMinimumSize(new java.awt.Dimension(0, 10));
        key2.setPreferredSize(new java.awt.Dimension(0, 10));
        key2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key2, gridBagConstraints);

        key3.setText("e");
        key3.setFocusPainted(false);
        key3.setFocusable(false);
        key3.setMaximumSize(new java.awt.Dimension(0, 10));
        key3.setMinimumSize(new java.awt.Dimension(0, 10));
        key3.setPreferredSize(new java.awt.Dimension(0, 10));
        key3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key3, gridBagConstraints);

        key4.setText("r");
        key4.setFocusPainted(false);
        key4.setFocusable(false);
        key4.setMaximumSize(new java.awt.Dimension(0, 10));
        key4.setMinimumSize(new java.awt.Dimension(0, 10));
        key4.setPreferredSize(new java.awt.Dimension(0, 10));
        key4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key4, gridBagConstraints);

        key5.setText("t");
        key5.setFocusPainted(false);
        key5.setFocusable(false);
        key5.setMaximumSize(new java.awt.Dimension(0, 10));
        key5.setMinimumSize(new java.awt.Dimension(0, 10));
        key5.setPreferredSize(new java.awt.Dimension(0, 10));
        key5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key5, gridBagConstraints);

        key6.setText("y");
        key6.setFocusPainted(false);
        key6.setFocusable(false);
        key6.setMaximumSize(new java.awt.Dimension(0, 10));
        key6.setMinimumSize(new java.awt.Dimension(0, 10));
        key6.setPreferredSize(new java.awt.Dimension(0, 10));
        key6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key6, gridBagConstraints);

        key7.setText("u");
        key7.setFocusPainted(false);
        key7.setFocusable(false);
        key7.setMaximumSize(new java.awt.Dimension(0, 10));
        key7.setMinimumSize(new java.awt.Dimension(0, 10));
        key7.setPreferredSize(new java.awt.Dimension(0, 10));
        key7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key7, gridBagConstraints);

        key8.setText("i");
        key8.setFocusPainted(false);
        key8.setFocusable(false);
        key8.setMaximumSize(new java.awt.Dimension(0, 10));
        key8.setMinimumSize(new java.awt.Dimension(0, 10));
        key8.setPreferredSize(new java.awt.Dimension(0, 10));
        key8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key8, gridBagConstraints);

        key9.setText("o");
        key9.setFocusPainted(false);
        key9.setFocusable(false);
        key9.setMaximumSize(new java.awt.Dimension(0, 10));
        key9.setMinimumSize(new java.awt.Dimension(0, 10));
        key9.setPreferredSize(new java.awt.Dimension(0, 10));
        key9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key9, gridBagConstraints);

        key10.setText("p");
        key10.setFocusPainted(false);
        key10.setFocusable(false);
        key10.setMaximumSize(new java.awt.Dimension(0, 10));
        key10.setMinimumSize(new java.awt.Dimension(0, 10));
        key10.setPreferredSize(new java.awt.Dimension(0, 10));
        key10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key10, gridBagConstraints);

        key11.setText("a");
        key11.setFocusPainted(false);
        key11.setFocusable(false);
        key11.setMaximumSize(new java.awt.Dimension(0, 10));
        key11.setMinimumSize(new java.awt.Dimension(0, 10));
        key11.setPreferredSize(new java.awt.Dimension(0, 10));
        key11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        keyboard.add(key11, gridBagConstraints);

        key12.setText("s");
        key12.setFocusPainted(false);
        key12.setFocusable(false);
        key12.setMaximumSize(new java.awt.Dimension(0, 10));
        key12.setMinimumSize(new java.awt.Dimension(0, 10));
        key12.setPreferredSize(new java.awt.Dimension(0, 10));
        key12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key12, gridBagConstraints);

        key13.setText("d");
        key13.setFocusPainted(false);
        key13.setFocusable(false);
        key13.setMaximumSize(new java.awt.Dimension(0, 10));
        key13.setMinimumSize(new java.awt.Dimension(0, 10));
        key13.setPreferredSize(new java.awt.Dimension(0, 10));
        key13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key13, gridBagConstraints);

        key14.setText("f");
        key14.setFocusPainted(false);
        key14.setFocusable(false);
        key14.setMaximumSize(new java.awt.Dimension(0, 10));
        key14.setMinimumSize(new java.awt.Dimension(0, 10));
        key14.setPreferredSize(new java.awt.Dimension(0, 10));
        key14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key14, gridBagConstraints);

        key15.setText("g");
        key15.setFocusPainted(false);
        key15.setFocusable(false);
        key15.setMaximumSize(new java.awt.Dimension(0, 10));
        key15.setMinimumSize(new java.awt.Dimension(0, 10));
        key15.setPreferredSize(new java.awt.Dimension(0, 10));
        key15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key15, gridBagConstraints);

        key16.setText("h");
        key16.setFocusPainted(false);
        key16.setFocusable(false);
        key16.setMaximumSize(new java.awt.Dimension(0, 10));
        key16.setMinimumSize(new java.awt.Dimension(0, 10));
        key16.setPreferredSize(new java.awt.Dimension(0, 10));
        key16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key16, gridBagConstraints);

        key17.setText("j");
        key17.setFocusPainted(false);
        key17.setFocusable(false);
        key17.setMaximumSize(new java.awt.Dimension(0, 10));
        key17.setMinimumSize(new java.awt.Dimension(0, 10));
        key17.setPreferredSize(new java.awt.Dimension(0, 10));
        key17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key17, gridBagConstraints);

        key18.setText("k");
        key18.setFocusPainted(false);
        key18.setFocusable(false);
        key18.setMaximumSize(new java.awt.Dimension(0, 10));
        key18.setMinimumSize(new java.awt.Dimension(0, 10));
        key18.setPreferredSize(new java.awt.Dimension(0, 10));
        key18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key18, gridBagConstraints);

        key19.setText("l");
        key19.setFocusPainted(false);
        key19.setFocusable(false);
        key19.setMaximumSize(new java.awt.Dimension(0, 10));
        key19.setMinimumSize(new java.awt.Dimension(0, 10));
        key19.setPreferredSize(new java.awt.Dimension(0, 10));
        key19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key19, gridBagConstraints);

        at.setText("@");
        at.setFocusPainted(false);
        at.setFocusable(false);
        at.setMaximumSize(new java.awt.Dimension(0, 10));
        at.setMinimumSize(new java.awt.Dimension(0, 10));
        at.setPreferredSize(new java.awt.Dimension(0, 10));
        at.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(at, gridBagConstraints);

        key20.setText("z");
        key20.setFocusPainted(false);
        key20.setFocusable(false);
        key20.setMaximumSize(new java.awt.Dimension(0, 10));
        key20.setMinimumSize(new java.awt.Dimension(0, 10));
        key20.setPreferredSize(new java.awt.Dimension(0, 10));
        key20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        keyboard.add(key20, gridBagConstraints);

        key21.setText("x");
        key21.setFocusPainted(false);
        key21.setFocusable(false);
        key21.setMaximumSize(new java.awt.Dimension(0, 10));
        key21.setMinimumSize(new java.awt.Dimension(0, 10));
        key21.setPreferredSize(new java.awt.Dimension(0, 10));
        key21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key21, gridBagConstraints);

        key22.setText("c");
        key22.setFocusPainted(false);
        key22.setFocusable(false);
        key22.setMaximumSize(new java.awt.Dimension(0, 10));
        key22.setMinimumSize(new java.awt.Dimension(0, 10));
        key22.setPreferredSize(new java.awt.Dimension(0, 10));
        key22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key22, gridBagConstraints);

        key23.setText("v");
        key23.setFocusPainted(false);
        key23.setFocusable(false);
        key23.setMaximumSize(new java.awt.Dimension(0, 10));
        key23.setMinimumSize(new java.awt.Dimension(0, 10));
        key23.setPreferredSize(new java.awt.Dimension(0, 10));
        key23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key23, gridBagConstraints);

        key24.setText("b");
        key24.setFocusPainted(false);
        key24.setFocusable(false);
        key24.setMaximumSize(new java.awt.Dimension(0, 10));
        key24.setMinimumSize(new java.awt.Dimension(0, 10));
        key24.setPreferredSize(new java.awt.Dimension(0, 10));
        key24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key24, gridBagConstraints);

        key25.setText("n");
        key25.setFocusPainted(false);
        key25.setFocusable(false);
        key25.setMaximumSize(new java.awt.Dimension(0, 10));
        key25.setMinimumSize(new java.awt.Dimension(0, 10));
        key25.setPreferredSize(new java.awt.Dimension(0, 10));
        key25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key25, gridBagConstraints);

        key26.setText("m");
        key26.setFocusPainted(false);
        key26.setFocusable(false);
        key26.setMaximumSize(new java.awt.Dimension(0, 10));
        key26.setMinimumSize(new java.awt.Dimension(0, 10));
        key26.setPreferredSize(new java.awt.Dimension(0, 10));
        key26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(key26, gridBagConstraints);

        back.setText("Del");
        back.setFocusPainted(false);
        back.setFocusable(false);
        back.setMaximumSize(new java.awt.Dimension(0, 10));
        back.setMinimumSize(new java.awt.Dimension(0, 10));
        back.setPreferredSize(new java.awt.Dimension(0, 10));
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(back, gridBagConstraints);

        dash.setText("-");
        dash.setFocusPainted(false);
        dash.setFocusable(false);
        dash.setMaximumSize(new java.awt.Dimension(0, 10));
        dash.setMinimumSize(new java.awt.Dimension(0, 10));
        dash.setPreferredSize(new java.awt.Dimension(0, 10));
        dash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(dash, gridBagConstraints);

        dot.setText(".");
        dot.setFocusPainted(false);
        dot.setFocusable(false);
        dot.setMaximumSize(new java.awt.Dimension(0, 10));
        dot.setMinimumSize(new java.awt.Dimension(0, 10));
        dot.setPreferredSize(new java.awt.Dimension(0, 10));
        dot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(dot, gridBagConstraints);

        shift.setText("Shift");
        shift.setFocusPainted(false);
        shift.setFocusable(false);
        shift.setMaximumSize(new java.awt.Dimension(0, 10));
        shift.setMinimumSize(new java.awt.Dimension(0, 10));
        shift.setPreferredSize(new java.awt.Dimension(0, 10));
        shift.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                shiftHandler(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        keyboard.add(shift, gridBagConstraints);

        space.setText(" ");
        space.setFocusPainted(false);
        space.setFocusable(false);
        space.setMaximumSize(new java.awt.Dimension(0, 10));
        space.setMinimumSize(new java.awt.Dimension(0, 10));
        space.setPreferredSize(new java.awt.Dimension(0, 10));
        space.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(space, gridBagConstraints);

        cancel.setText("Cancel");
        cancel.setActionCommand(ACTION_CANCEL);
        cancel.setFocusPainted(false);
        cancel.setFocusable(false);
        cancel.setMaximumSize(new java.awt.Dimension(0, 10));
        cancel.setMinimumSize(new java.awt.Dimension(0, 10));
        cancel.setPreferredSize(new java.awt.Dimension(0, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(cancel, gridBagConstraints);

        done.setText("Done");
        done.setActionCommand(ACTION_DONE);
        done.setFocusPainted(false);
        done.setFocusable(false);
        done.setMaximumSize(new java.awt.Dimension(0, 10));
        done.setMinimumSize(new java.awt.Dimension(0, 10));
        done.setPreferredSize(new java.awt.Dimension(0, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        keyboard.add(done, gridBagConstraints);

        dotcom.setText(".com");
        dotcom.setMaximumSize(new java.awt.Dimension(0, 10));
        dotcom.setMinimumSize(new java.awt.Dimension(0, 10));
        dotcom.setPreferredSize(new java.awt.Dimension(20, 10));
        dotcom.setSelected(true);
        dotcom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        keyboard.add(dotcom, gridBagConstraints);

        add(keyboard, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void keyAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyAction
        if(textComponent != null && evt.getSource() != shift) {
	    Document document = textComponent.getDocument();
	    int selStart = textComponent.getSelectionStart();
	    int selEnd = textComponent.getSelectionEnd();

	    try {
		if(evt.getSource() == back) {
		    if(selStart != selEnd)
			document.remove(selStart, selEnd - selStart);
		    else
			document.remove(textComponent.getCaretPosition() - 1, 1);
		}
		else {
		    document.remove(selStart, selEnd - selStart);

		    text = shift.isSelected() ? //^ caps.isSelected()?
			evt.getActionCommand().toUpperCase() : evt.getActionCommand().toLowerCase();

		    if(shift.isSelected())
			shift.setSelected(false);

		    document.insertString(textComponent.getCaretPosition(), text, null);
		}
	    }
	    catch(BadLocationException ex) {}
	}

    }//GEN-LAST:event_keyAction

    private void shiftHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_shiftHandler
	repaint();
    }//GEN-LAST:event_shiftHandler


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton at;
    private javax.swing.JButton back;
    public javax.swing.JButton cancel;
    private javax.swing.JButton dash;
    public javax.swing.JButton done;
    private javax.swing.JButton dot;
    private javax.swing.JButton dotcom;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler13;
    private javax.swing.Box.Filler filler14;
    private javax.swing.Box.Filler filler15;
    private javax.swing.Box.Filler filler16;
    private javax.swing.Box.Filler filler17;
    private javax.swing.Box.Filler filler18;
    private javax.swing.Box.Filler filler19;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler20;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JButton key1;
    private javax.swing.JButton key10;
    private javax.swing.JButton key11;
    private javax.swing.JButton key12;
    private javax.swing.JButton key13;
    private javax.swing.JButton key14;
    private javax.swing.JButton key15;
    private javax.swing.JButton key16;
    private javax.swing.JButton key17;
    private javax.swing.JButton key18;
    private javax.swing.JButton key19;
    private javax.swing.JButton key2;
    private javax.swing.JButton key20;
    private javax.swing.JButton key21;
    private javax.swing.JButton key22;
    private javax.swing.JButton key23;
    private javax.swing.JButton key24;
    private javax.swing.JButton key25;
    private javax.swing.JButton key26;
    private javax.swing.JButton key3;
    private javax.swing.JButton key4;
    private javax.swing.JButton key5;
    private javax.swing.JButton key6;
    private javax.swing.JButton key7;
    private javax.swing.JButton key8;
    private javax.swing.JButton key9;
    private javax.swing.JPanel keyboard;
    private javax.swing.JButton num0;
    private javax.swing.JButton num1;
    private javax.swing.JButton num2;
    private javax.swing.JButton num3;
    private javax.swing.JButton num4;
    private javax.swing.JButton num5;
    private javax.swing.JButton num6;
    private javax.swing.JButton num7;
    private javax.swing.JButton num8;
    private javax.swing.JButton num9;
    private javax.swing.JToggleButton shift;
    private javax.swing.JButton space;
    // End of variables declaration//GEN-END:variables

    public void setDoneButtonLabel(String displayName) {
	done.setText(displayName);
    }

    public boolean isDoneButtonEnabled() {
	return done.isEnabled();
    }

    public void setDoneButtonEnabled(boolean enabled) {
	done.setEnabled(enabled);
    }

    public class KeyButton extends JButton {
	private String text, altText;

	public KeyButton() {
	    this(null, null);
	}

	public KeyButton(String text, String altText) {
	    this.text = text;
	    this.altText = altText;
	}

	@Override
	public void setText(String text) {
	    this.text = text;

	    if(altText == null)
		this.altText = text.toUpperCase();
	}

	@Override
        public String getText() {
            return shift != null && shift.isSelected() && altText != null? altText : text;
        }
    }

    private class CaretListenerImpl implements CaretListener {
	public void caretUpdate(CaretEvent e) {
	    doAutoCaps();
	}
    }
}

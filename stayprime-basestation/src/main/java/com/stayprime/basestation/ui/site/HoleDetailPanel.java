/*
 * 
 */
package com.stayprime.basestation.ui.site;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import com.jgoodies.forms.factories.*;
import com.jgoodies.forms.layout.*;
import com.stayprime.ui.editor.EditorPanel;
import com.stayprime.basestation.ui.FileChooser;
import com.stayprime.geo.BasicMapImage;
import com.stayprime.hibernate.entities.Holes;
import java.io.File;

/**
 *
 * @author benjamin
 */
public class HoleDetailPanel extends EditorPanel<Holes> {
    private FileChooser fileChooser;

    /**
     * Creates new form HoleDetailPanel
     */
    public HoleDetailPanel() {
        initComponents();
        addListeners();
        addNestedEditorPanel(holeTeeBoxEditor);
    }

    private void addListeners() {
        protipsField.getDocument().addDocumentListener(getModificationListener());
    }

    public void setFileChooser(FileChooser fileChooser) {
        this.fileChooser = fileChooser;
    }

    @Override
    public void refresh() {
        Holes hole = getEditingObject();
        boolean valid = hole != null;
        selectMapButton.setEnabled(valid);
        clearMapButton.setEnabled(valid);
        selectFlybyButton.setEnabled(valid);
        clearFlybyButton.setEnabled(valid);
        protipsField.setEnabled(valid);
        protipsEditButton.setEnabled(valid);

        mapField.setText(valid && hole.getMapImage() != null? hole.getMapImage() : null);
        flybyField.setText(!valid? null : hole.getFlyoverImage());
        protipsField.setText(!valid? null : hole.getProTips());
        holeTeeBoxEditor.setGolfHole(!valid? null : hole);
    }

    private void setMap(BasicMapImage mapImage) {
        Holes hole = getEditingObject();
        if (hole != null) {
            hole.setMap(mapImage);
        }
        mapField.setText(mapImage == null? null : mapImage.getName());
    }

    private void setFlyby(String flyby) {
        Holes hole = getEditingObject();
        if (hole != null) {
            hole.setFlyoverImage(flyby);
        }
        flybyField.setText(flyby == null? null : new File(flyby).getName());
    }

    private void selectMapButtonActionPerformed() {
        File file = fileChooser.selectMap(this);
        if (file != null) {
            BasicMapImage map = fileChooser.loadMap(file);
            if (map != null) {
                setMap(map);
                setModified(true);
            }
        }
    }

    private void clearMapButtonActionPerformed() {
        setMap(null);
        setModified(true);
    }

    private void selectFlybyButtonActionPerformed() {
        File file = fileChooser.selectFlyby(this);
        if (file != null) {
            setFlyby(file.getAbsolutePath());
            setModified(true);
        }
    }

    private void clearFlybyButtonActionPerformed() {
        setFlyby(null);
        setModified(true);
    }

    private void protipsEditButtonActionPerformed() {
        String protips = JOptionPane.showInputDialog(this, "Pro tips:", protipsField.getText());
        if (protips != null) {
            protipsField.setText(protips);
            setModified(true);
        }
    }

    @Override
    public boolean applyChanges() {
        Holes hole = getEditingObject();
        if (hole != null) {
            hole.setProTips(protipsField.getText());
        }
        return isModified() | super.applyChanges();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - YASH KHANDELWAL
    private void initComponents() {
        separator1 = new JLabel();
        mapLabel = new JLabel();
        mapField = new JTextField();
        selectMapButton = new JButton();
        clearMapButton = new JButton();
        flybyLabel = new JLabel();
        flybyField = new JTextField();
        selectFlybyButton = new JButton();
        clearFlybyButton = new JButton();
        protipsLabel = new JLabel();
        protipsField = new JTextField();
        protipsEditButton = new JButton();
        separator2 = new JLabel();
        holeTeeBoxEditor = new HoleTeeBoxEditor();

        //======== this ========
        setName("Form");

        // JFormDesigner evaluation mark
        setBorder(new javax.swing.border.CompoundBorder(
            new javax.swing.border.TitledBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0),
                "JFormDesigner Evaluation", javax.swing.border.TitledBorder.CENTER,
                javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", java.awt.Font.BOLD, 12),
                java.awt.Color.red), getBorder())); addPropertyChangeListener(new java.beans.PropertyChangeListener(){public void propertyChange(java.beans.PropertyChangeEvent e){if("border".equals(e.getPropertyName()))throw new RuntimeException();}});

        setLayout(new FormLayout(
            "right:pref, $lcgap, 116dlu, 3*($lcgap, default)",
            "3*(default, $lgap), default, $rgap, 0dlu, 1dlu, fill:[73dlu,pref]"));

        //---- separator1 ----
        separator1.setText("Hole details");
        separator1.setFont(separator1.getFont().deriveFont(separator1.getFont().getStyle() | Font.BOLD));
        separator1.setName("separator1");
        add(separator1, CC.xywh(1, 1, 7, 1));

        //---- mapLabel ----
        mapLabel.setText("Map:");
        mapLabel.setName("mapLabel");
        add(mapLabel, CC.xy(1, 3));

        //---- mapField ----
        mapField.setEditable(false);
        mapField.setName("mapField");
        add(mapField, CC.xy(3, 3));

        //---- selectMapButton ----
        selectMapButton.setText("Load");
        selectMapButton.setName("selectMapButton");
        selectMapButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectMapButtonActionPerformed();
            }
        });
        add(selectMapButton, CC.xy(5, 3));

        //---- clearMapButton ----
        clearMapButton.setText("<html>&nbsp;X&nbsp;");
        clearMapButton.setName("clearMapButton");
        clearMapButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearMapButtonActionPerformed();
            }
        });
        add(clearMapButton, CC.xy(7, 3));

        //---- flybyLabel ----
        flybyLabel.setText("Flyby:");
        flybyLabel.setName("flybyLabel");
        add(flybyLabel, CC.xy(1, 5));

        //---- flybyField ----
        flybyField.setEditable(false);
        flybyField.setName("flybyField");
        add(flybyField, CC.xy(3, 5));

        //---- selectFlybyButton ----
        selectFlybyButton.setText("Load");
        selectFlybyButton.setName("selectFlybyButton");
        selectFlybyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectFlybyButtonActionPerformed();
            }
        });
        add(selectFlybyButton, CC.xy(5, 5));

        //---- clearFlybyButton ----
        clearFlybyButton.setText("<html>&nbsp;X&nbsp;");
        clearFlybyButton.setName("clearFlybyButton");
        clearFlybyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearFlybyButtonActionPerformed();
            }
        });
        add(clearFlybyButton, CC.xy(7, 5));

        //---- protipsLabel ----
        protipsLabel.setText("Pro tips:");
        protipsLabel.setName("protipsLabel");
        add(protipsLabel, CC.xy(1, 7));

        //---- protipsField ----
        protipsField.setName("protipsField");
        add(protipsField, CC.xy(3, 7));

        //---- protipsEditButton ----
        protipsEditButton.setText("...");
        protipsEditButton.setName("protipsEditButton");
        protipsEditButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                protipsEditButtonActionPerformed();
            }
        });
        add(protipsEditButton, CC.xywh(5, 7, 2, 1));

        //---- separator2 ----
        separator2.setText("Tee boxes");
        separator2.setFont(separator2.getFont().deriveFont(separator2.getFont().getStyle() | Font.BOLD));
        separator2.setName("separator2");
        add(separator2, CC.xywh(1, 9, 7, 1));

        //---- holeTeeBoxEditor ----
        holeTeeBoxEditor.setName("holeTeeBoxEditor");
        add(holeTeeBoxEditor, CC.xywh(3, 11, 6, 1));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - YASH KHANDELWAL
    private JLabel separator1;
    private JLabel mapLabel;
    private JTextField mapField;
    private JButton selectMapButton;
    private JButton clearMapButton;
    private JLabel flybyLabel;
    private JTextField flybyField;
    private JButton selectFlybyButton;
    private JButton clearFlybyButton;
    private JLabel protipsLabel;
    private JTextField protipsField;
    private JButton protipsEditButton;
    private JLabel separator2;
    private HoleTeeBoxEditor holeTeeBoxEditor;
    // End of variables declaration//GEN-END:variables

}

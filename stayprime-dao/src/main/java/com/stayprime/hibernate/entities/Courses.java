package com.stayprime.hibernate.entities;
// Generated Sep 17, 2014 5:18:02 PM by Hibernate Tools 4.3.1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;

/**
 * Courses generated by hbm2java
 */
@Entity
@Table(name = "courses")
public class Courses implements java.io.Serializable {

    @Id @Column(unique = true, nullable = false)
    private int number;

    @Column(nullable = false)
    private String name;

    private String description;

    @Column(nullable = false)
    private int holes;

    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)
    @JoinColumn(name = "course", referencedColumnName = "number")
    @OrderBy("id")
    private Set<Holes> holeses;

    public Courses() {
        this.holeses = new HashSet<>();
    }

    public int getNumber() {
        return this.number;
    }

    public void setNumber(int number) {
        this.number = number;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getHoles() {
        return this.holes;
    }

    public void setHoles(int holes) {
        this.holes = holes;
    }

    public Set<Holes> getHoleses() {
        return this.holeses;
    }

    public void setHoleses(Set<Holes> holeses) {
        this.holeses = holeses;
    }

    public void setParents() {
        if (holeses != null) {
            for (Holes h : holeses) {
                h.setCourse(this);
            }
        }
    }

    public void trimHoleCount() {
        if (holeses == null) {
            holeses = new HashSet<>(holes);
        }
        
        if (holeses.size() > holes) {
            List<Holes> tempHolesList = Holes.getSortedHolesList(holeses);
            
            while (tempHolesList.size() > holes) {
                tempHolesList.remove(holes);
            }
            
            holeses.clear();
            for (Holes hole : tempHolesList) {
                holeses.add(hole);
            }
            
        }
        for (int i = holeses.size(); i < holes; i++) {
            Holes hole = new Holes(this, i + 1);
            holeses.add(hole);
        }
    }

}

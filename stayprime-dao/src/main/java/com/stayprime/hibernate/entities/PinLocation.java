package com.stayprime.hibernate.entities;
// Generated Sep 17, 2014 5:18:02 PM by Hibernate Tools 4.3.1

import com.aeben.golfclub.CourseDefinition;
import com.aeben.golfclub.DrawablePinLocation;
import com.aeben.golfclub.GolfClub;
import com.aeben.golfclub.GolfCourseObject;
import com.aeben.golfclub.HoleDefinition;
import com.stayprime.geo.Coordinates;
import java.util.Date;
import java.util.List;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * PinLocation generated by hbm2java
 */
@Entity
@Table(name = "pin_location")
public class PinLocation implements java.io.Serializable {

    @EmbeddedId
    @AttributeOverrides({
        @AttributeOverride(name = "course", column = @Column(name = "course", nullable = false)),
        @AttributeOverride(name = "hole", column = @Column(name = "hole", nullable = false))
    })
    private PinLocationId id;

    private String location;

    @Temporal(TemporalType.TIMESTAMP)
    private Date lastUpdated;

    public PinLocation() {
    }

    public PinLocation(PinLocationId id) {
        this.id = id;
    }

    public PinLocation(int course, int hole, String location, Date lastUpdated) {
        this(new PinLocationId(course, hole), location, lastUpdated);
    }

    public PinLocation(PinLocationId id, String location, Date lastUpdated) {
        this.id = id;
        this.location = location;
        this.lastUpdated = lastUpdated;
    }

    public PinLocationId getId() {
        return this.id;
    }

    public void setId(PinLocationId id) {
        this.id = id;
    }

    public String getLocation() {
        return this.location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public Date getLastUpdated() {
        return this.lastUpdated;
    }

    public void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public static boolean loadPinLocation(GolfClub courseInfo, List<PinLocation> pinLocationList) {
        if (pinLocationList == null) {
            return false;
        }

        for (PinLocation location : pinLocationList) {
            for (CourseDefinition course : courseInfo.getCourses()) {
                if (course.getCourseNumber() == location.getId().getCourse()) {
                    int holeNumber = location.getId().getHole();
                    if (holeNumber <= course.getHoleCount()) {
                        HoleDefinition hole = course.getHoleNumber(holeNumber);
                        if (hole != null) {
                            DrawablePinLocation point = new DrawablePinLocation("Pin " + hole.number, hole.number, hole);
                            point.type = GolfCourseObject.ObjectType.PINFLAG;

                            if (location.getLocation() != null) {
                                point.coordinates = new Coordinates(location.getLocation());
                            }

                            if (location.getLastUpdated() != null) {
                                point.lastUpdated = location.getLastUpdated();
                            }

                            hole.pinLocation = point;
                        }
                    }
                }
            }
        }
        return true;
    }

    @Override
    public String toString() {
        //return super.toString(); //To change body of generated methods, choose Tools | Templates.
        return location == null ? "" : location;
    }

}

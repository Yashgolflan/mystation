package com.stayprime.hibernate.entities;
// Generated Dec 22, 2014 5:39:10 PM by Hibernate Tools 4.3.1

import com.stayprime.geo.Coordinates;
import java.awt.geom.Point2D;
import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import org.apache.commons.lang.ObjectUtils;

/**
 * CartInfo generated by hbm2java
 */
@Entity
@Table(uniqueConstraints = @UniqueConstraint(columnNames = "macAddress"))
public class CartInfo implements Serializable, Comparable {

    @Id
    @Column(unique = true, nullable = false)
    private int cartNumber;

    @ManyToOne
    @JoinColumn(name = "macAddress", unique = true)
    private CartUnit cartUnit;

    private Integer cartMode;

    private Float heading;

    @Temporal(TemporalType.TIMESTAMP)
    private Calendar locationLastUpdated;

    @Column(nullable = false, columnDefinition = "TINYINT")
    private byte status;

    private Integer paceOfPlay;

    private Integer playingCourse;

    private Integer playingHole;

    @Transient
    private final Coordinates position;

    @Transient
    private Integer viewHole;

    @Transient //@Embedded
    private PropertiesColumn properties;

    @Transient
    private boolean nullPosition = true;
    
    private Integer batteryLevel;
    
    private Integer deviceType;

    public CartInfo() {
        position = new Coordinates();
        properties = new PropertiesColumn();
    }

    public CartInfo(int cartNumber, byte status) {
        this.cartNumber = cartNumber;
        this.status = status;
        position = new Coordinates(Double.NaN, Double.NaN);
        properties = new PropertiesColumn();
    }

    public int getCartNumber() {
        return this.cartNumber;
    }

    public void setCartNumber(int cartNumber) {
        this.cartNumber = cartNumber;
    }

    public String getMacAddress() {
        return cartUnit == null? null : cartUnit.getMacAddress();
    }

    public Integer getCartMode() {
        return this.cartMode;
    }

    public void setCartMode(Integer cartMode) {
        this.cartMode = cartMode;
    }

    @Column @Access(AccessType.PROPERTY)
    public Double getLongitude() {
        return nullPosition? null : position.longitude;
    }

    public void setLongitude(Double longitude) {
        setPosition(position.latitude, longitude);
    }

    @Column @Access(AccessType.PROPERTY)
    public Double getLatitude() {
        return nullPosition? null : position.latitude;
    }

    public void setLatitude(Double latitude) {
        setPosition(latitude, position.longitude);
    }

    public Float getHeading() {
        return this.heading;
    }

    public void setHeading(Float heading) {
        this.heading = heading;
    }

    public Date getLocationLastUpdated() {
        return locationLastUpdated == null? null : locationLastUpdated.getTime();
    }

    public void setLocationLastUpdated(Date locationLastUpdated) {
        if (locationLastUpdated == null) {
            this.locationLastUpdated = null;
        }
        else {
            if (this.locationLastUpdated == null) {
                this.locationLastUpdated = new GregorianCalendar();
            }
            this.locationLastUpdated.setTime(locationLastUpdated);
        }
    }

    public int getStatus() {
        return this.status;
    }

    public void setStatus(int status) {
        this.status = (byte) status;
    }

    public Integer getPaceOfPlay() {
        return this.paceOfPlay;
    }

    public void setPaceOfPlay(Integer paceOfPlay) {
        this.paceOfPlay = paceOfPlay;
    }

    public Integer getPlayingCourse() {
        return this.playingCourse;
    }

    public void setPlayingCourse(Integer playingCourse) {
        this.playingCourse = playingCourse;
    }

    public Integer getPlayingHole() {
        return this.playingHole;
    }

    public void setPlayingHole(Integer playingHole) {
        this.playingHole = playingHole;
    }

    public CartUnit getCartUnit() {
        return cartUnit;
    }

    public void setCartUnit(CartUnit cartUnit) {
        this.cartUnit = cartUnit;
    }

    public Point2D getPoint() {
        if(nullPosition || position.isValid() == false) {
            return null;
        }
        else {
            return new Point2D.Double(position.longitude, position.latitude);
        }
    }

    public Coordinates getPosition() {
        if(nullPosition || position.isValid() == false) {
            return null;
        }
        else {
            return position;
        }
    }

    public void setPosition(Double lat, Double lon) {
        if (Coordinates.isValid(lat, lon) == false) {
            position.set(
                    Coordinates.isValid(lat)? lat : position.latitude,
                    Coordinates.isValid(lon)? lon : position.longitude
            );
            nullPosition = true;
        }
        else {
            position.set(lat, lon);
            nullPosition = false;
        }
    }

    public Integer getViewHole() {
        return viewHole;
    }

    public void setViewHole(Integer viewHole) {
        this.viewHole = viewHole;
    }

    public boolean getStatusFlag(int flag) {
        return (status & flag) != 0;
    }

    public PropertiesColumn getProperties() {
        return properties;
    }

    public boolean isPlaying() {
        return playingHole != null && playingHole > 0
                && paceOfPlay != null;
    }
    
    public Integer getBatteryLevel() {
        return batteryLevel;
    }
    
    public void setBatteryLevel(Integer batteryLevel) {
        this.batteryLevel = batteryLevel;
    }
    
    public Integer getDeviceType() {
        return deviceType;
    }
    
    public void setDeviceType(Integer deviceType) {
        this.deviceType = deviceType;
    }

    @Override
    public String toString() {
        return cartNumber == 0? "Cart" : "Cart " + cartNumber;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj instanceof CartInfo) {
            CartInfo cartInfo = (CartInfo) obj;
            return cartInfo.getCartNumber() == cartNumber;
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 29 * hash + this.cartNumber;
        return hash;
    }

    @Override
    public int compareTo(Object o) {
        if (o instanceof CartInfo) {
            CartInfo c = (CartInfo) o;
            return Integer.compare(cartNumber, c.getCartNumber());
        }
        return Integer.MAX_VALUE;
    }

    public static CartInfo find(List<CartInfo> list, int cartNumber) {
        if (list == null) return null;
        for (CartInfo ci : list) {
            if (ObjectUtils.equals(ci.getCartNumber(), cartNumber)) {
                return ci;
            }
        }
        return null;
    }

    public static CartInfo findByMacAddress(List<CartInfo> list, String mac) {
        if (list == null) return null;
        for (CartInfo ci : list) {
            if (ObjectUtils.equals(ci.getMacAddress(), mac)) {
                return ci;
            }
        }
        return null;
    }

}

/*
 * 
 */
package com.stayprime.basestation2.ui.fnb;

import ca.odell.glazedlists.EventList;
import com.stayprime.basestation2.BaseStation2App;
import com.stayprime.basestation2.Constant;
import com.stayprime.basestation2.ui.custom.MenuIconEditor;
import com.stayprime.hibernate.entities.MenuItems;
import com.stayprime.ui.editor.Factory;
import com.stayprime.ui.editor.ListEditor;
import com.stayprime.util.UIUtil;
import java.awt.Component;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableCellRenderer;
import org.apache.commons.configuration.PropertiesConfiguration;

/**
 *
 * @author benjamin
 */
public class MenuItemsList extends ListEditor<MenuItems> {

    private MenuIconEditor iconRenderer, iconEditor;
    private TypeEditor typeEditor, typeRenderer;
    private final MenuTableFormat menuTableFormat;

    /**
     * Creates new form MenuItemsList
     */
    public MenuItemsList() {
        initComponents();
        menuTableFormat = new MenuTableFormat();
        setTableFormat(menuTableFormat);
        setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        setItemFactory(new Factory<MenuItems>() {
            @Override
            public MenuItems create() {
                return new MenuItems();
            }
        });
    }

    @Override
    public void init() {
        initRenderers();
        super.init();
    }

    private void initRenderers() {
        iconRenderer = new MenuIconEditor();
        iconEditor = new MenuIconEditor();
        typeEditor = new TypeEditor(new JComboBox(new String[]{"Food", "Drink", "Snack"}));
        typeRenderer = new TypeEditor(new JComboBox(new String[]{"Food", "Drink", "Snack"}));

        try {
            PropertiesConfiguration config = BaseStation2App.getApplication().getConfig();
            String currencyCode = config.getString(Constant.CONFIG_CURRENCY, Constant.DEFAULT_CURRENCY);
            menuTableFormat.setCurrency(currencyCode);
        }
        catch (Exception ex) {
        }
    }

    @Override
    protected void setupTableColumns() {
        JTable t = getTable();
        t.setRowHeight(45);
        UIUtil.setColumnWidths(t, 10, 10, 20, 15, 30, 40, 15);
        t.getColumn("Icon").setCellRenderer(iconRenderer);
        t.getColumn("Icon").setCellEditor(iconEditor);
        t.getColumn("Picture").setCellRenderer(iconRenderer);
        t.getColumn("Picture").setCellEditor(iconEditor);
        t.getColumn("Type").setCellRenderer(typeRenderer);
        t.getColumn("Type").setCellEditor(typeEditor);
        iconEditor.setList(getViewList());
        iconRenderer.setList(getViewList());
    }

    public void updateRenderersUi() {
        iconRenderer.updateUI();
        iconEditor.updateUI();
        typeEditor.combo.updateUI();
        typeRenderer.combo.updateUI();
    }

    @Override
    protected void setSelectedItems(EventList<MenuItems> selected) {
        BaseStation2App.getApplication().showStatusMessage(selected.size() + " selected.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        getContainerDelegate().setLayout(new javax.swing.BoxLayout(getContainerDelegate(), javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private static class TypeEditor extends DefaultCellEditor implements TableCellRenderer {
        JComboBox combo;
        public TypeEditor(JComboBox combo) {
            super(combo);
            this.combo = combo;
            combo.setFocusable(false);
            setClickCountToStart(1);

        }
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected,
                int row, int column) {
            if (value instanceof Integer) {
                return (JComboBox) super.getTableCellEditorComponent(table, combo.getItemAt((Integer) value), isSelected, row, column);
            } else {
                return (JComboBox) super.getTableCellEditorComponent(table, value, isSelected, row, column);
            }
        }

        @Override
        public Object getCellEditorValue() {
            return combo.getSelectedIndex();
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            return getTableCellEditorComponent(table, value, isSelected, row, column);
        }
    }

}
